# -------------------------------------------------------------------------------------------------
# This Python script creates a GUI for the robotic arm SCADA testbed. The length of the robotic
# arm and the current state of the robotic arm is querried from the MODBUS memory of the PLC
# Program by:-
# Rishabh Das
# Date:- 4th October 2018
# -------------------------------------------------------------------------------------------------
import math
import pygame
import time
import sys
from pyModbusTCP.client import ModbusClient

# -------------------------------------------------------------------------------------------------
# Declaring the specification fo the robotic arm as global variable. The coordinates are also
# declared as global variable
# -------------------------------------------------------------------------------------------------
# Declaring the coordinate of the two joints of the robotic arm
x = 0
y = 0
x1 = 0
y1 = 0
# Get the length of the arms from the MODBUS memory of the PLC
length_1 = 100
length_2 = 200
# Get the current Theta positions of the arms from the MODBUS memory of the PLC
Theta_1 = 30
Theta_2 = 40

# -------------------------------------------------------------------------------------------------
# This function queries the PLC to get the Specification of the Robotic arm
# -------------------------------------------------------------------------------------------------
def get_specs():
    global x, y, x1, y1
    # Declaring Modbus PLC
    print("The IP address of the PLC is:",sys.argv[1])
    #Declaring the modbus client
    try:
        client = ModbusClient(host=sys.argv[1],port=502)
    except ValueError:
        print("Error with host or port number")

    while True:
        #check the connectivity of the TCP client to the GUI to the PLC
        if not client.is_open():
            if not client.open():
                print("Unable to Connect to "+ sys.argv[1] +":502")

        # Reading the coil for current lengths and the thetas
        theta_list = client.read_input_registers(2, reg_nb=2)

        #Print the list of the thetas
        print (theta_list)

        # Get the length of the arms from the MODBUS memory of the PLC to local variables
        length_1=100
        length_2=200

        # Get the current Theta positions of the arms from the MODBUS memory of the PLC to local variables
        Theta_1=theta_list[0]
        Theta_2=theta_list[0] + theta_list[1]

        #Calculate the coordinates
        calculate_coordinates(length_1,length_2,Theta_1,Theta_2)

        #Generate the GUI
        create_graphics(x1,y1,x,y)

        time.sleep(0.01)

# -------------------------------------------------------------------------------------------------
# This function calculates the coordinates of the arm
# -------------------------------------------------------------------------------------------------
def calculate_coordinates(length_1,length_2,Theta_1,Theta_2):
    global x,y,x1,y1
    # Calculating the coordinate of the first joint
    x1= length_1*(math.cos(Theta_1*0.0174533))
    y1= length_1*(math.sin(Theta_1*0.0174533))
    # Calculating the coordinate of the end of the robotic arm
    x= length_1*(math.cos(Theta_1*0.0174533)) + length_2*(math.cos(Theta_2*0.0174533))
    y= length_1*(math.sin(Theta_1*0.0174533)) + length_2*(math.sin(Theta_2*0.0174533))
    print("The final coordinate of the Robotic arm:(x1,y1)",x1,y1)
    print("The final coordinate of the Robotic arm:(x,y)",x,y)

# -------------------------------------------------------------------------------------------------
# This project creates the graphics of the robotic arm using the pygame library
# -------------------------------------------------------------------------------------------------
def create_graphics(x1,y1,x,y):
    #Drawing the robotic arm in pygame
    pygame.init()
    coordinate1 = pygame.font.SysFont("Courier", 16)
    coordinate2 = pygame.font.SysFont("Courier", 16)
    size = [550, 550]
    screen = pygame.display.set_mode(size)
    pygame.display.set_caption("Robotic Arm")

    #Declaring the colors required int he graphics. This is in RGB format
    BLACK = (0,0,0)
    GREY = (169,169,169)
    BLUE  = (0,0,255)
    GREEN = (0,255,0)
    RED   = (255,0,0)

    #Declaring clock

    screen.fill(GREY)
    pygame.draw.line(screen, GREEN,[275, 275], [275+x1,275-y1], 5)
    pygame.draw.line(screen, GREEN,[275+x1,275-y1], [275+x,275-y], 5)
    pygame.draw.circle(screen, BLUE, [275, 275], 7)
    pygame.draw.circle(screen, BLUE, [275+round(x1), 275-round(y1)], 7)
    pygame.draw.circle(screen, BLUE, [275+round(x), 275-round(y)], 7)
    #rect=pygame.Rect(275,275,275+round(x),275-round(y))
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit(0)
    pygame.display.update()


# -------------------------------------------------------------------------------------------------
# Main Function controlling the flow of the program
# -------------------------------------------------------------------------------------------------
def main():
    # Get the specification of the robotic arms fromt the PLC
    get_specs()
    # Calculate the coordinates of the Robotic arms
    calculate_coordinates(length_1,length_2,Theta_1,Theta_2)
    print("The final coordinate of the Robotic arm:(x1,y1)", x1, y1)
    print("The final coordinate of the Robotic arm:(x,y)", x, y)
    create_graphics(x1, y1, x, y)



if __name__ == '__main__':
    main()










